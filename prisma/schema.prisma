generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  email                String            @unique
  name                 String?
  image                String?
  language             String?           @default("en")
  createdAt            DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  accounts             Account[]
  barcodes             Barcode[]
  householdMemberships HouseholdMember[]
  itemHistory          ItemHistory[]
  items                Item[]
  notifications        Notification[]
  sessions             Session[]

  @@map("users")
}

model Account {
  id                  String  @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  session_token String   @unique
  user_id       String
  expires       DateTime @db.Timestamptz(6)
  users         User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Household {
  id             String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  name           String
  description    String?
  invitationCode String?           @unique @default(dbgenerated("(gen_random_uuid())::text")) @map("invitation_code")
  createdAt      DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  categories     Category[]
  members        HouseholdMember[]
  items          Item[]
  rooms          Room[]

  @@map("households")
}

model HouseholdMember {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId      String    @map("user_id")
  householdId String    @map("household_id")
  role        String?   @default("USER")
  joinedAt    DateTime? @default(now()) @map("joined_at") @db.Timestamptz(6)
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, householdId])
  @@map("household_members")
}

model Room {
  id             String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  name           String
  description    String?
  householdId    String        @map("household_id")
  createdAt      DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  cabinets       Cabinet[]
  newItemHistory ItemHistory[] @relation("ItemHistoryNewRoom")
  oldItemHistory ItemHistory[] @relation("ItemHistoryOldRoom")
  items          Item[]
  household      Household     @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("rooms")
}

model Cabinet {
  id             String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  name           String
  description    String?
  roomId         String        @map("room_id")
  createdAt      DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  room           Room          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  newItemHistory ItemHistory[] @relation("ItemHistoryNewCabinet")
  oldItemHistory ItemHistory[] @relation("ItemHistoryOldCabinet")
  items          Item[]

  @@map("cabinets")
}

model Category {
  id          String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String
  description String?
  level       Int
  parentId    String?    @map("parent_id")
  householdId String     @map("household_id")
  createdAt   DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  household   Household  @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  items       Item[]

  @@map("categories")
}

model Item {
  id            String         @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String
  description   String?
  quantity      Int            @default(1)
  minQuantity   Int?           @default(0) @map("min_quantity")
  image_url     String?
  barcode       String?
  qr_code       String?
  categoryId    String?        @map("category_id")
  roomId        String?        @map("room_id")
  cabinetId     String?        @map("cabinet_id")
  householdId   String         @map("household_id")
  addedById     String         @map("added_by_id")
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  qrCode        String?
  imageUrl      String?
  aiDescription String?
  language      String?        @map("language")
  buyDate       DateTime?      @map("buy_date") @db.Timestamp(6)
  buyCost       Float?         @map("buy_cost") @db.Real
  buyLocation   String?        @map("buy_location")
  invoiceNumber String?        @map("invoice_number")
  sellerName    String?        @map("seller_name")
  history       ItemHistory[]
  addedBy       User           @relation(fields: [addedById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cabinet       Cabinet?       @relation(fields: [cabinetId], references: [id], onUpdate: NoAction)
  category      Category?      @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  household     Household      @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  room          Room?          @relation(fields: [roomId], references: [id], onUpdate: NoAction)
  notifications Notification[]

  @@map("items")
}

model ItemHistory {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  itemId       String    @map("item_id")
  action       String
  description  String?
  performedBy  String    @map("performed_by")
  oldRoomId    String?   @map("old_room_id")
  newRoomId    String?   @map("new_room_id")
  oldCabinetId String?   @map("old_cabinet_id")
  newCabinetId String?   @map("new_cabinet_id")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  item         Item      @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  newCabinet   Cabinet?  @relation("ItemHistoryNewCabinet", fields: [newCabinetId], references: [id], onUpdate: NoAction)
  newRoom      Room?     @relation("ItemHistoryNewRoom", fields: [newRoomId], references: [id], onUpdate: NoAction)
  oldCabinet   Cabinet?  @relation("ItemHistoryOldCabinet", fields: [oldCabinetId], references: [id], onUpdate: NoAction)
  oldRoom      Room?     @relation("ItemHistoryOldRoom", fields: [oldRoomId], references: [id], onUpdate: NoAction)
  performer    User      @relation(fields: [performedBy], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("item_history")
}

model Barcode {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id      String
  barcode      String
  product_name String?
  description  String?
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  users        User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("barcodes")
}

model Notification {
  id        String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId    String    @map("user_id")
  itemId    String?   @map("item_id")
  type      String
  title     String
  message   String
  read      Boolean?  @default(false)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  item      Item?     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notifications")
}
